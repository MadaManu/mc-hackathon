var client = require("./_client-helper"),
	assert = require('assert');

describe('Oauth -', function() {

	it('should return an error for non-oauth enabled API keys when creating an access token', function(done) {
		client.accesstoken.create({
			authCode: 'invalid_code',
			redirectUri: 'http://127.0.0.1:9090/shopalong/oauth/auth'
		}, function(error, data) {

			if (data) {
				done(new Error("Oauth Token should not exist, but got a response with an invalid code?"));
			}

			assert.equal(error.data.error, "invalid_client", "Oauth request with non-oauth enabled keys fails as expected");
			assert.equal(error.data.error_description, "Non-OAuth keys cannot be used for OAuth requests", "Oauth request with non-oauth enabled keys fails as expected");
			done();
		});
	});

	it('should return an error for non-oauth enabled API keys when refreshing an access token', function(done) {
		client.accesstoken.refresh('invalid_token', function(error, data) {

			if (data) {
				done(new Error("Oauth Token should not exist, but got a response with an invalid code?"));
			}

			assert.equal(error.data.error, "invalid_client", "Oauth request with non-oauth enabled keys fails as expected");
			assert.equal(error.data.error_description, "Non-OAuth keys cannot be used for OAuth requests", "Oauth request with non-oauth enabled keys fails as expected");
			done();
		});
	});

	it('should return an error for non-oauth enabled API keys when revoking an access token', function(done) {
		client.accesstoken.revoke('invalid_token', function(error, data) {

			if (data) {
				done(new Error("Oauth Token should not exist, but got a response with an invalid code?"));
			}

			assert.equal(error.data.error, "invalid_client", "Oauth request with non-oauth enabled keys fails as expected");
			assert.equal(error.data.error_description, "Non-OAuth keys cannot be used for OAuth requests", "Oauth request with non-oauth enabled keys fails as expected");
			done();
		});
	});

});