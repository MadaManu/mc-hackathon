var client = require("./_client-helper"),
	assert = require('assert');

describe('Subscription -', function() {

	it('should create a subscription successfully', function(done) {
		// Creat a plan to use for subscription
		client.plan.create({
			amount: "1000",
			name: "plan1",
			frequency: "MONTHLY"
		}, function(error, data) {

			if (error) {
				console.error(JSON.stringify(error.data));
				done(error);
			}

			// Create a customer to use for subscription
			client.customer.create({
				email: "customer@mastercard.com",
				name: "Customer Customer",
				card: {
					expMonth: "11",
					expYear: "19",
					cvc: "123",
					number: "5555555555554444"
				},
				reference: "Ref1"
			}, function(customerError, customerData) {

				if (customerError) {
					console.error(JSON.stringify(customerError.data));
					done(customerError);
				}

				// Use ids of newly created plan & customer to execute 'create' request
				client.subscription.create({
					plan: data.id,
					customer: customerData.id
				}, function(createError, createData) {

					if (createError) {
						console.error(JSON.stringify(createError.data));
						done(createError);
					}

					assert.equal((createData.id.length > 0).toString(), 'true', "Create Subscription should succeed");
					done();
				});
			});
		});
	});

	it('should delete a subscription successfully', function(done) {
		// Creat a plan to use for subscription
		client.plan.create({
			amount: "1000",
			name: "plan1",
			frequency: "MONTHLY"
		}, function(error, data) {

			if (error) {
				console.error(JSON.stringify(error.data));
				done(error);
			}

			// Create a customer to use for subscription
			client.customer.create({
				email: "customer@mastercard.com",
				name: "Customer Customer",
				card: {
					expMonth: "11",
					expYear: "19",
					cvc: "123",
					number: "5555555555554444"
				},
				reference: "Ref1"
			}, function(customerError, customerData) {

				if (customerError) {
					console.error(JSON.stringify(customerError.data));
					done(customerError);
				}

				// Use ids of newly created plan & customer to execute 'create' request
				client.subscription.create({
					plan: data.id,
					customer: customerData.id
				}, function(createError, createData) {

					if (createError) {
						console.error(JSON.stringify(createError.data));
						done(createError);
					}

					// Use id of newly created subscription to execute 'delete' request
					client.subscription.delete(createData.id, function(deleteError, deleteData) {

						if (deleteError) {
							console.error(JSON.stringify(deleteError.data));
							done(deleteError);
						}

						assert.equal(deleteData.id.toString(), createData.id.toString(), "Deletion of subscription with ID '" + createData.id + "' should succeed");
						done();
					});
				});
			});
		});
	});

	it('should retrieve a list of subscriptions successfully', function(done) {
		client.subscription.list({
			max: 30
		}, function(error, data) {

			if (error) {
				console.error(JSON.stringify(error.data));
				done(error);
			}

			assert.equal(data.max.toString(), '30', "List Subscription succeeds.");
			done();
		});
	});

	it('should find a subscription successfully', function(done) {
		// Creat a plan to use for subscription
		client.plan.create({
			amount: "1000",
			name: "plan1",
			frequency: "MONTHLY"
		}, function(error, data) {

			if (error) {
				console.error(JSON.stringify(error.data));
				done(error);
			}

			// Create a customer to use for subscription
			client.customer.create({
				email: "customer@mastercard.com",
				name: "Customer Customer",
				card: {
					expMonth: "11",
					expYear: "19",
					cvc: "123",
					number: "5555555555554444"
				},
				reference: "Ref1"
			}, function(customerError, customerData) {

				if (customerError) {
					console.error(JSON.stringify(customerError.data));
					done(customerError);
				}

				// Use ids of newly created plan & customer to execute 'create' request
				client.subscription.create({
					plan: data.id,
					customer: customerData.id
				}, function(createError, createData) {

					if (createError) {
						console.error(JSON.stringify(createError.data));
						done(createError);
					}

					// Use id of newly created subscription to execute 'find' request
					client.subscription.find(createData.id, function(findError, findData) {

						if (findError) {
							console.error(JSON.stringify(findError.data));
							done(findError);
						}

						assert.equal(findData.id.toString(), createData.id.toString(), "Find subscription with ID '" + createData.id + "' should succeed");
						done();
					});
				});
			});
		});
	});

	it('should update a subscription successfully', function(done) {
		// Creat a plan to use for subscription
		client.plan.create({
			amount: "1000",
			name: "plan1",
			frequency: "MONTHLY"
		}, function(error, data) {

			if (error) {
				console.error(JSON.stringify(error.data));
				done(error);
			}

			// Create a customer to use for subscription
			client.customer.create({
				email: "customer@mastercard.com",
				name: "Customer Customer",
				card: {
					expMonth: "11",
					expYear: "19",
					cvc: "123",
					number: "5555555555554444"
				},
				reference: "Ref1"
			}, function(customerError, customerData) {

				if (customerError) {
					console.error(JSON.stringify(customerError.data));
					done(customerError);
				}

				// Use ids of newly created plan & customer to execute 'create' request
				client.subscription.create({
					plan: data.id,
					customer: customerData.id
				}, function(createError, createData) {

					if (createError) {
						console.error(JSON.stringify(createError.data));
						done(createError);
					}

					// Use id of newly created subscription to execute 'update' request
					client.subscription.update({
						id: createData.id,
						plan: data.id
					}, function(updateError, updateData) {

						if (updateError) {
							console.error(JSON.stringify(updateError.data));
							done(updateError);
						}

						// Use id of newly created subscription to execute 'update' request
						assert.equal(updateData.id.toString(), createData.id.toString(), "Update subscription with ID '" + createData.id + "' should succeed");
						done();
					});
				});
			});
		});
	});

});