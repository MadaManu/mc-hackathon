/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This class exposes the Simplify domain
 * objects on which different API calls can be
 * invoked upon.
 *
 * @class Simplify
 * @static
 */
var Simplify = {},
	Payments = require("./lib/payments");

/**
 * Function to get a new Client instance based on a set of
 * Simplify API keys i.e.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });</code></pre>
 *
 * @method getClient
 * @param {Object} appKeys Object containing the public & private API keys
 * @return {Client} New Client instance
 */

Simplify.getClient = function(appKeys) {
	return new Client(appKeys);
}

/**
 * This class contains the Simplify domain objects to execute API calls against.
 *
 * @class Client
 * @param {Object} appKeys Object containing the public & private API keys
 */

function Client(appKeys) {
		this.cardtoken = new CardToken(appKeys);
	this.chargeback = new Chargeback(appKeys);
	this.coupon = new Coupon(appKeys);
	this.customer = new Customer(appKeys);
	this.deposit = new Deposit(appKeys);
	this.invoice = new Invoice(appKeys);
	this.invoiceitem = new InvoiceItem(appKeys);
	this.payment = new Payment(appKeys);
	this.plan = new Plan(appKeys);
	this.refund = new Refund(appKeys);
	this.subscription = new Subscription(appKeys);
	this.tax = new Tax(appKeys);
	this.webhook = new Webhook(appKeys);
	this.accesstoken = new AccessToken(appKeys);
	this.event = new Event(appKeys);
}

// Export our object as a module
module.exports = Simplify;

/**
 * This class is a Simplify domain object used for OAuth transactions.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.accesstoken.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 });
 </code></pre>
 * @class AccessToken
 * @param {Object} appKeys Object containing the public & private API keys
 */

function AccessToken(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create an access token.
	 *
	 * @method create
	 * @param {Object} params A map of parameters to create an access token.<br/><br/> Valid parameters include:
	 * <ul>
	 * <li>authCode : Code return from a successful OAuth authorization <b>(REQUIRED)</b></li>
	 * <li>redirectUri : URI that must match the URI saved on account <b>(REQUIRED)</b></li>
	 * </ul>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys,
			domainType: "accessToken",
			action: "create",
			params: params
		}, callback);
	}

	/**
	 * Function to refresh an access token.
	 *
	 * @method refresh
	 * @param {String} refreshToken A refresh token returned with an oauth response
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.refresh = function(refreshToken, callback) {
		Payments.execute({
			auth: this.appKeys,
			domainType: "accessToken",
			action: "refresh",
			params: refreshToken
		}, callback);
	}

	/**
	 * Function to revoke an access token.
	 *
	 * @method revoke
	 * @param {String} accessToken The access token to revoke
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.revoke = function(accessToken, callback) {
		Payments.execute({
			auth: this.appKeys,
			domainType: "accessToken",
			action: "revoke",
			params: accessToken
		}, callback);
	}
};

/**
 * This class is a Simplify domain object for handling events.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.event.create(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Event
 * @param {Object} appKeys Object containing the public & private API keys
 */

function Event(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to handle a Webhook event sent from Simplify.
	 *
	 * @method create
	 * @param {Object} params A map of parameters to create an event with
	 * <br/><ul>
	 * <li>payload : The payload of the webhook event <b>(REQUIRED)</b></li>
	 * <li>url : The url of the webhook for this event <b>(REQUIRED)</b></li>
	 * </ul>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.jwsDecode({
			auth: this.appKeys,
			params: params
		}, callback);
	};
};

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.cardtoken.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class CardToken
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function CardToken(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a CardToken object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the CardToken from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>callback : The URL callback for the cardtoken </li></li>
	 *				<li>card.addressCity : City of the cardholder. [max length: 50, min length: 2] </li>
	 *				<li>card.addressCountry : Country code (ISO-3166-1-alpha-2 code) of residence of the cardholder. [max length: 2, min length: 2] </li>
	 *				<li>card.addressLine1 : Address of the cardholder. [max length: 255] </li>
	 *				<li>card.addressLine2 : Address of the cardholder if needed. [max length: 255] </li>
	 *				<li>card.addressState : State code (USPS code) of residence of the cardholder. [max length: 2, min length: 2] </li>
	 *				<li>card.addressZip : Postal code of the cardholder. The postal code size is between 5 and 9 in length and only contain numbers. [max length: 9, min length: 3] </li>
	 *				<li>card.cvc : CVC security code of the card. This is the code on the back of the card. Example: 123 </li>
	 *				<li>card.expMonth : Expiration month of the card. Format is MM. Example: January = 01 [min value: 1, max value: 12] <b>(REQUIRED)</b></li>
	 *				<li>card.expYear : Expiration year of the card. Format is YY. Example: 2013 = 13 [max value: 99] <b>(REQUIRED)</b></li>
	 *				<li>card.name : Name as appears on the card. [max length: 50, min length: 2] </li>
	 *				<li>card.number : Card number as it appears on the card. [max length: 19, min length: 13] <b>(REQUIRED)</b></li>
	 *				<li>key : Key used to create the card token. </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "cardToken", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a CardToken object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the CardToken to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "cardToken", 
			action: "show", 
			params: id
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.chargeback.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Chargeback
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Chargeback(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to retrieve a list Chargeback objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Chargeback list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>id<li>amount<li>description<li>dateCreated</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "chargeback", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Chargeback object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Chargeback to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "chargeback", 
			action: "show", 
			params: id
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.coupon.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Coupon
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Coupon(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Coupon object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Coupon from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>amountOff : Amount off of the price of the product in minor units in the currency of the merchant. While this field is optional, you must provide either amountOff or percentOff for a coupon. Example: 1000 = 10.00 [min value: 1, max value: 9999900] </li>
	 *				<li>couponCode : Code that identifies the coupon to be used. [min length: 2] <b>(REQUIRED)</b></li>
	 *				<li>description : A brief section that describes the coupon. </li>
	 *				<li>durationInMonths : Duration in months that the coupon will be applied after it has first been selected. [min value: 1, max value: 9999] </li>
	 *				<li>endDate : Last date of the coupon in UTC millis that the coupon can be applied to a subscription. This ends at 23:59:59 of the merchant timezone. </li>
	 *				<li>maxRedemptions : Maximum number of redemptions allowed for the coupon. A redemption is defined as when the coupon is applied to the subscription for the first time. [min value: 1] </li>
	 *				<li>percentOff : Percentage off of the price of the product. While this field is optional, you must provide either amountOff or percentOff for a coupon. The percent off is a whole number. [min value: 1, max value: 100] </li>
	 *				<li>startDate : First date of the coupon in UTC millis that the coupon can be applied to a subscription. This starts at midnight of the merchant timezone. <b>(REQUIRED)</b></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "coupon", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Coupon object.
	 *
	 * @method delete
	 * @param 	A string ID of the Coupon to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "coupon", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Coupon objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Coupon list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>dateCreated<li>maxRedemptions<li>timesRedeemed<li>id<li>startDate<li>endDate<li>percentOff<li>couponCode<li>durationInMonths<li>amountOff</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "coupon", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Coupon object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Coupon to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "coupon", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a Coupon object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the Coupon object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the Coupon object to update</li> 
	 *				<li>endDate : The ending date in UTC millis for the coupon. This must be after the starting date of the coupon.</li>
	 *				</li>
	 *				<li>maxRedemptions : Maximum number of redemptions allowed for the coupon. A redemption is defined as when the coupon is applied to the subscription for the first time. [min value: 1]</li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "coupon", 
			action: "update", 
			params: params
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.customer.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Customer
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Customer(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Customer object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Customer from.<br/><br/>
	 *			Valid parameters include: <ul></li>
	 *				<li>card.addressCity : City of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressCountry : Country code (ISO-3166-1-alpha-2 code) of residence of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressLine1 : Address of the cardholder <b>(REQUIRED)</b></li>
	 *				<li>card.addressLine2 : Address of the cardholder if needed. <b>(REQUIRED)</b></li>
	 *				<li>card.addressState : State code (USPS code) of residence of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressZip : Postal code of the cardholder. The postal code size is between 5 and 9 in length and only contain numbers. <b>(REQUIRED)</b></li>
	 *				<li>card.cvc : CVC security code of the card. This is the code on the back of the card. Example: 123 <b>(REQUIRED)</b></li>
	 *				<li>card.expMonth : Expiration month of the card. Format is MM. Example: January = 01 <b>(REQUIRED)</b></li>
	 *				<li>card.expYear : Expiration year of the card. Format is YY. Example: 2013 = 13 <b>(REQUIRED)</b></li>
	 *				<li>card.id : ID of card. Unused during customer create. </li>
	 *				<li>card.name : Name as appears on the card. <b>(REQUIRED)</b></li>
	 *				<li>card.number : Card number as it appears on the card. [max length: 19, min length: 13] </li>
	 *				<li>email : Email address of the customer <b>(REQUIRED)</b></li>
	 *				<li>name : Customer name [min length: 2] <b>(REQUIRED)</b></li>
	 *				<li>reference : Reference field for external applications use. </li></li>
	 *				<li>subscriptions.amount : Amount of payment in minor units. Example: 1000 = 10.00 [min value: 50, max value: 9999900] </li>
	 *				<li>subscriptions.coupon : Coupon associated with the subscription for the customer. </li>
	 *				<li>subscriptions.currency : Currency code (ISO-4217). Must match the currency associated with your account. [default: USD] </li>
	 *				<li>subscriptions.customer : The customer ID to create the subscription for. Do not supply this when creating a customer. </li>
	 *				<li>subscriptions.frequency : Frequency of payment for the plan. Example: Monthly </li>
	 *				<li>subscriptions.name : Name describing subscription </li>
	 *				<li>subscriptions.plan : The plan ID that the subscription should be created from. </li>
	 *				<li>subscriptions.quantity : Quantity of the plan for the subscription. [min value: 1] </li>
	 *				<li>token : If specified, card associated with card token will be used </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "customer", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Customer object.
	 *
	 * @method delete
	 * @param 	A string ID of the Customer to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "customer", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Customer objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Customer list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>dateCreated<li>id<li>name<li>email<li>reference</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "customer", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Customer object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Customer to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "customer", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a Customer object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the Customer object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the Customer object to update</li> </li>
	 *				<li>card.addressCity : City of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressCountry : Country code (ISO-3166-1-alpha-2 code) of residence of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressLine1 : Address of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressLine2 : Address of the cardholder if needed. <b>(REQUIRED)</b></li>
	 *				<li>card.addressState : State code (USPS code) of residence of the cardholder. <b>(REQUIRED)</b></li>
	 *				<li>card.addressZip : Postal code of the cardholder. The postal code size is between 5 and 9 in length and only contain numbers. <b>(REQUIRED)</b></li>
	 *				<li>card.cvc : CVC security code of the card. This is the code on the back of the card. Example: 123 <b>(REQUIRED)</b></li>
	 *				<li>card.expMonth : Expiration month of the card. Format is MM.  Example: January = 01 <b>(REQUIRED)</b></li>
	 *				<li>card.expYear : Expiration year of the card. Format is YY. Example: 2013 = 13 <b>(REQUIRED)</b></li>
	 *				<li>card.id : ID of card. If present, card details for the customer will not be updated. If not present, the customer will be updated with the supplied card details.</li>
	 *				<li>card.name : Name as appears on the card. <b>(REQUIRED)</b></li>
	 *				<li>card.number : Card number as it appears on the card. [max length: 19, min length: 13]</li>
	 *				<li>email : Email address of the customer <b>(REQUIRED)</b></li>
	 *				</li>
	 *				<li>name : Customer name [min length: 2] <b>(REQUIRED)</b></li>
	 *				<li>reference : Reference field for external applications use.</li>
	 *				<li>token : If specified, card associated with card token will be added to the customer</li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "customer", 
			action: "update", 
			params: params
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.deposit.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Deposit
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Deposit(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to retrieve a list Deposit objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Deposit list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>amount<li>dateCreated<li>depositDate</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "deposit", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Deposit object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Deposit to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "deposit", 
			action: "show", 
			params: id
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.invoice.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Invoice
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Invoice(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Invoice object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Invoice from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>currency : Currency code (ISO-4217). Must match the currency associated with your account. [max length: 3, min length: 3, default: USD] </li>
	 *				<li>customer : The customer ID of the customer we are invoicing.  This is optional is a name and email are provided </li>
	 *				<li>discountRate : The discount percent as a decimal e.g. 12.5.  This is used to calculate the discount amount which is subtracted from the total amount due before any tax is applied. [max length: 6] </li>
	 *				<li>dueDate : The date invoice payment is due.  If a late fee is provided this will be added to the invoice total is the due date has past. </li>
	 *				<li>email : The email of the customer we are invoicing.  This is optional if a customer id is provided.  A new customer will be created using the the name and email. </li>
	 *				<li>invoiceId : User defined invoice id. If not provided the system will generate a numeric id. [max length: 255] </li></li>
	 *				<li>items.amount : Amount of the invoice item (minor units). Example: 1000 = 10.00. [min value: 1, max value: 9999900] <b>(REQUIRED)</b></li>
	 *				<li>items.description : The description of the invoice item. [max length: 1024] </li>
	 *				<li>items.invoice : The ID of the invoice this item belongs to. </li>
	 *				<li>items.quantity : Quantity of the item.  This total amount of the invoice item is the amount * quantity. [min value: 1, max value: 999999, default: 1] </li>
	 *				<li>items.reference : User defined reference field. [max length: 255] </li>
	 *				<li>items.tax : The tax ID of the tax charge in the invoice item. </li>
	 *				<li>lateFee : The late fee amount that will be added to the invoice total is the due date is past due.  Value provided must be in minor units. Example: 1000 = 10.00 [max value: 9999900] </li>
	 *				<li>memo : A memo that is displayed to the customer on the invoice payment screen. [max length: 4000] </li>
	 *				<li>name : The name of the customer we are invoicing.  This is optional if a customer id is provided.  A new customer will be created using the the name and email. [max length: 50, min length: 2] </li>
	 *				<li>note : This field can be used to store a note that is not displayed to the customer. [max length: 4000] </li>
	 *				<li>reference : User defined reference field. [max length: 255] </li>
	 *				<li>type : The type of invoice.  One of WEB or MOBILE. [valid values: WEB, MOBILE, default: WEB] </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoice", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Invoice object.
	 *
	 * @method delete
	 * @param 	A string ID of the Invoice to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoice", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Invoice objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Invoice list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>id<li>invoiceDate<li>dueDate<li>datePaid<li>customer<li>status</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoice", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Invoice object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Invoice to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoice", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a Invoice object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the Invoice object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the Invoice object to update</li> 
	 *				<li>datePaid : This is the date the invoice was PAID in UTC millis.</li>
	 *				<li>discountRate : The discount percent as a decimal e.g. 12.5.  This is used to calculate the discount amount which is subtracted from the total amount due before any tax is applied. [max length: 6]</li>
	 *				<li>dueDate : The date invoice payment is due.  If a late fee is provided this will be added to the invoice total is the due date has past.</li>
	 *				</li></li>
	 *				<li>items.amount : Amount of the invoice item (minor units). Example: 1000 = 10.00 [min value: 1, max value: 9999900] <b>(REQUIRED)</b></li>
	 *				<li>items.description : The description of the invoice item. [max length: 1024]</li>
	 *				<li>items.invoice : The ID of the invoice this item belongs to.</li>
	 *				<li>items.quantity : Quantity of the item.  This total amount of the invoice item is the amount * quantity. [min value: 1, max value: 999999, default: 1]</li>
	 *				<li>items.reference : User defined reference field. [max length: 255]</li>
	 *				<li>items.tax : The tax ID of the tax charge in the invoice item.</li>
	 *				<li>lateFee : The late fee amount that will be added to the invoice total is the due date is past due.  Value provided must be in minor units. Example: 1000 = 10.00.</li>
	 *				<li>memo : A memo that is displayed to the customer on the invoice payment screen. [max length: 4000]</li>
	 *				<li>note : This field can be used to store a note that is not displayed to the customer. [max length: 4000]</li>
	 *				<li>payment : The ID of the payment.  Use this ID to query the /payment API. [max length: 255]</li>
	 *				<li>reference : User defined reference field. [max length: 255]</li>
	 *				<li>status : New status of the invoice.</li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoice", 
			action: "update", 
			params: params
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.invoiceitem.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class InvoiceItem
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function InvoiceItem(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a InvoiceItem object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the InvoiceItem from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>amount : Amount of the invoice item (minor units). Example: 1000 = 10.00 [min value: 1, max value: 9999900] <b>(REQUIRED)</b></li>
	 *				<li>description : Individual items of an invoice [max length: 1024] </li>
	 *				<li>invoice : The ID of the invoice this item belongs to. </li>
	 *				<li>quantity : Quantity of the item.  This total amount of the invoice item is the amount * quantity. [min value: 1, max value: 999999, default: 1] </li>
	 *				<li>reference : User defined reference field. [max length: 255] </li>
	 *				<li>tax : The tax ID of the tax charge in the invoice item. </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoiceItem", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a InvoiceItem object.
	 *
	 * @method delete
	 * @param 	A string ID of the InvoiceItem to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoiceItem", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a InvoiceItem object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the InvoiceItem to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoiceItem", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a InvoiceItem object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the InvoiceItem object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the InvoiceItem object to update</li> 
	 *				<li>amount : Amount of the invoice item (minor units). Example: 1000 = 10.00 [min value: 1, max value: 9999900]</li>
	 *				<li>description : Individual items of an invoice</li>
	 *				</li>
	 *				<li>quantity : Quantity of the item.  This total amount of the invoice item is the amount * quantity. [min value: 1, max value: 999999]</li>
	 *				<li>reference : User defined reference field.</li>
	 *				<li>tax : The tax ID of the tax charge in the invoice item.</li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "invoiceItem", 
			action: "update", 
			params: params
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.payment.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Payment
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Payment(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Payment object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Payment from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>amount : Amount of the payment (minor units). Example: 1000 = 10.00 [min value: 50, max value: 9999900] <b>(REQUIRED)</b></li></li>
	 *				<li>card.addressCity : City of the cardholder. [max length: 50, min length: 2] </li>
	 *				<li>card.addressCountry : Country code (ISO-3166-1-alpha-2 code) of residence of the cardholder. [max length: 2, min length: 2] </li>
	 *				<li>card.addressLine1 : Address of the cardholder. [max length: 255] </li>
	 *				<li>card.addressLine2 : Address of the cardholder if needed. [max length: 255] </li>
	 *				<li>card.addressState : State code (USPS code) of residence of the cardholder. [max length: 2, min length: 2] </li>
	 *				<li>card.addressZip : Postal code of the cardholder. The postal code size is between 5 and 9 in length and only contain numbers. [max length: 9, min length: 3] </li>
	 *				<li>card.cvc : CVC security code of the card. This is the code on the back of the card. Example: 123 </li>
	 *				<li>card.expMonth : Expiration month of the card. Format is MM. Example: January = 01 [min value: 1, max value: 12] <b>(REQUIRED)</b></li>
	 *				<li>card.expYear : Expiration year of the card. Format is YY. Example: 2013 = 13 [max value: 99] <b>(REQUIRED)</b></li>
	 *				<li>card.name : Name as it appears on the card. [max length: 50, min length: 2] </li>
	 *				<li>card.number : Card number as it appears on the card. [max length: 19, min length: 13] <b>(REQUIRED)</b></li>
	 *				<li>currency : Currency code (ISO-4217) for the transaction. Must match the currency associated with your account. [default: USD] <b>(REQUIRED)</b></li>
	 *				<li>customer : ID of customer. If specified, card on file of customer will be used. </li>
	 *				<li>description : Custom naming of payment for external systems to use. </li>
	 *				<li>reference : Custom reference field to be used with outside systems. </li>
	 *				<li>token : If specified, card associated with card token will be used. [max length: 255] </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "payment", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a list Payment objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Payment list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>dateCreated<li>amount<li>id<li>description<li>paymentDate</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "payment", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Payment object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Payment to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "payment", 
			action: "show", 
			params: id
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.plan.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Plan
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Plan(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Plan object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Plan from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>amount : Amount of payment for the plan in minor units. Example: 1000 = 10.00 [min value: 50, max value: 9999900] <b>(REQUIRED)</b></li>
	 *				<li>currency : Currency code (ISO-4217) for the plan. Must match the currency associated with your account. [default: USD] <b>(REQUIRED)</b></li>
	 *				<li>frequency : Frequency of payment for the plan. Example: Monthly <b>(REQUIRED)</b></li>
	 *				<li>name : Name of the plan [max length: 50, min length: 2] <b>(REQUIRED)</b></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "plan", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Plan object.
	 *
	 * @method delete
	 * @param 	A string ID of the Plan to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "plan", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Plan objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Plan list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>dateCreated<li>amount<li>frequency<li>name<li>id</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "plan", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Plan object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Plan to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "plan", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a Plan object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the Plan object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the Plan object to update</li> 
	 *				</li>
	 *				<li>name : Name of the plan. [min length: 2] <b>(REQUIRED)</b></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "plan", 
			action: "update", 
			params: params
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.refund.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Refund
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Refund(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Refund object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Refund from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>amount : Amount of the refund in minor units. Example: 1000 = 10.00 [min value: 1, max value: 9999900] <b>(REQUIRED)</b></li>
	 *				<li>payment : ID of the payment for the refund <b>(REQUIRED)</b></li>
	 *				<li>reason : Reason for the refund </li>
	 *				<li>reference : Custom reference field to be used with outside systems. </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "refund", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a list Refund objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Refund list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>id<li>amount<li>description<li>dateCreated<li>paymentDate</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "refund", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Refund object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Refund to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "refund", 
			action: "show", 
			params: id
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.subscription.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Subscription
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Subscription(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Subscription object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Subscription from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>amount : Amount of the payment (minor units). Example: 1000 = 10.00 [min value: 50, max value: 9999900] </li>
	 *				<li>coupon : Coupon ID associated with the subscription </li>
	 *				<li>currency : Currency code (ISO-4217). Must match the currency associated with your account. [default: USD] </li>
	 *				<li>customer : Customer that is enrolling in the subscription. </li>
	 *				<li>frequency : Frequency of payment for the plan. Example: Monthly </li>
	 *				<li>name : Name describing subscription </li>
	 *				<li>plan : The ID of the plan that should be used for the subscription. </li>
	 *				<li>quantity : Quantity of the plan for the subscription. [min value: 1] </li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "subscription", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Subscription object.
	 *
	 * @method delete
	 * @param 	A string ID of the Subscription to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "subscription", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Subscription objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Subscription list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>id<li>plan</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "subscription", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Subscription object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Subscription to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "subscription", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a Subscription object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the Subscription object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the Subscription object to update</li> 
	 *				<li>amount : Amount of the payment (minor units). Example: 1000 = 10.00 [min value: 50, max value: 9999900]</li>
	 *				<li>coupon : Coupon being assigned to this subscription</li>
	 *				<li>currency : Currency code (ISO-4217). Must match the currency associated with your account. [default: USD]</li>
	 *				<li>frequency : Frequency of payment for the plan. Example: Monthly</li>
	 *				</li>
	 *				<li>name : Name describing subscription</li>
	 *				<li>plan : Plan that should be used for the subscription.</li>
	 *				<li>prorate : Whether to prorate existing subscription. [default: true] <b>(REQUIRED)</b></li>
	 *				<li>quantity : Quantity of the plan for the subscription. [min value: 1]</li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "subscription", 
			action: "update", 
			params: params
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.tax.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Tax
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Tax(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Tax object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Tax from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>label : The label of the tax object. [max length: 255] <b>(REQUIRED)</b></li>
	 *				<li>rate : The tax rate.  Decimal value up three decimal places.  e.g 12.501. [max length: 6] <b>(REQUIRED)</b></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "tax", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Tax object.
	 *
	 * @method delete
	 * @param 	A string ID of the Tax to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "tax", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Tax objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Tax list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>id<li>label</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "tax", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Tax object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Tax to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "tax", 
			action: "show", 
			params: id
		}, callback);
	}

}

/*
 * Copyright (c) 2013, 2014 MasterCard International Incorporated
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

/**
 * This is a Simplify domain object.
 * In order to get access to a domain object, a client needs to be created.
 * The client is then used to invoke the different methods e.g.
 *
 * <pre><code>var client = Simplify.getClient({
 *	publicKey: 'YOUR_PUBLIC_API_KEY',
 *	privateKey: 'YOUR_PRIVATE_API_KEY'
 * });
 * 
 * client.webhook.METHOD_NAME(params, function(error, data){
 *	if(error){
 *		// handle the error
 * 	}
 * 
 * 	// Awesome...no error, handle the data
 * });
 * </code></pre>
 *
 * @class Webhook
 * @constructor
 * @param {Object} appKeys Object containing the public & private API keys
 */
function Webhook(appKeys) {
	this.appKeys = appKeys;

	/**
	 * Function to create a Webhook object.
	 *
	 * @method create
	 * @param {Object} params A map of parameters in which to create the Webhook from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>url : Endpoint URL <b>(REQUIRED)</b></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.create = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "webhook", 
			action: "create", 
			params: params
		}, callback);
	}

	/**
	 * Function to delete a Webhook object.
	 *
	 * @method delete
	 * @param 	A string ID of the Webhook to delete.
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.delete = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "webhook", 
			action: "delete", 
			params: id
		}, callback);
	}

	/**
	 * Function to retrieve a list Webhook objects.
	 *
	 * @method list
	 * @param {Object} params A map of parameters in which to define the Webhook list from.<br/><br/>
	 *			Valid parameters include: <ul>
	 *				<li>filter : Filters to apply to the list. </li>
	 *				<li>max : Allows up to a max of 50 list items to return. [max value: 50, default: 20] </li>
	 *				<li>offset : Used in paging of the list.  This is the start offset of the page. [default: 0] </li>
	 *				<li>sorting : Allows for ascending or descending sorting of the list. The value maps properties to the sort direction (either 'asc' for ascending or 'desc' for descending).<br/>Sortable properties are: <ul><li>dateCreated</li></ul></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.list = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "webhook", 
			action: "list", 
			params: params
		}, callback);
	}

	/**
	 * Function to retrieve a Webhook object from the API.
	 *
	 * @method find
	 * @param {String} id The ID of the Webhook to retrieve
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.find = function(id, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "webhook", 
			action: "show", 
			params: id
		}, callback);
	}

	/**
	 * Function to update a Webhook object.
	 *
	 * @method update
	 * @param {Object} params A map of parameters on which to update the Webhook object.<br/><br/>
	 *			Valid parameters include:<ul> 
	 *				<li>id : A string ID of the Webhook object to update</li> 
	 *				</li>
	 *				<li>url : Endpoint URL <b>(REQUIRED)</b></li></ul><br/>
	 *			<b>NOTE:</b> Any parameters with a sub-parameter (e.g. param.subParam) need to be nested when passed as an argument in e.g. 
	 *<pre><code>{
		param: {
	 *		subParam1: 'value', 
	 *		subParam2: 'value'
	 *	}
	 *}</code></pre>
	 * @param {Function} callback A function to handle success/error responses from the API.<br/>
	 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
	 */
	this.update = function(params, callback) {
		Payments.execute({
			auth: this.appKeys, 
			domainType: "webhook", 
			action: "update", 
			params: params
		}, callback);
	}

}

